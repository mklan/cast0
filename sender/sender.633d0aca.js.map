{"version":3,"sources":["index.ts"],"names":[],"mappings":";AAWA,IAAM,EAAO,CACX,MAAO,CACL,GAAI,YAEN,KAAM,CACJ,GAAI,aAIR,SAAS,eAAe,gBAAgB,iBAAiB,QAAS,GAClE,SAAS,eAAe,mBAAmB,iBAAiB,QAAS,GAErE,IAAI,EAAU,KAGR,EAAkB,SAAA,GAAa,OAAA,SAAC,GACpC,EAAI,iCAAmC,EAAI,YAC3C,EAAU,GACF,kBAAkB,GAC1B,EAAQ,mBAAmB,EAAW,KAGxC,SAAS,EAAsB,GAC7B,EAAI,oCAAsC,EAAU,kBAAoB,EAAQ,WAC3E,IACH,EAAU,MAId,SAAS,EAAgB,EAAW,GAClC,EAAI,gCAAkC,EAAY,cAAgB,GAGpE,SAAS,EAAkB,EAAO,GAChC,EAAI,qBAUA,IAAA,EAAiB,IAAI,OAAO,KAAK,eAAe,GAEhD,EAAY,IAAI,OAAO,KAAK,UAC9B,EACA,EAAgB,GAChB,GAGF,OAAO,KAAK,WACV,EACA,EACA,GAIJ,SAAS,EAAiB,GACxB,EAAI,wCAAkD,cAAR,EAAsB,QAAU,eAIhF,SAAS,IACP,EAAI,mBACY,OAAZ,GAIJ,EAAI,wBACJ,EAAQ,KAAK,EAAkB,IAJ7B,EAAI,oBAOR,SAAS,IACP,EAAI,oBACJ,EAAU,KAGZ,SAAS,IACP,EAAI,iBAGN,SAAS,EAAQ,GACf,EAAI,sBAAwB,KAAK,UAAU,IAI7C,SAAS,EAAc,GACrB,EAAI,+BAAiC,EAAI,WACzC,EAAU,EAGZ,SAAS,IACP,EAAI,gBACY,OAAZ,GAIJ,EAAI,oBAEJ,OAAO,KAAK,eACV,EACA,IAPA,EAAI,wBAYR,OAAM,sBAA4B,SAAS,GACzC,QAAQ,IAAI,sBAAuB,GAC/B,GACF,EAAkB,EAAK,MAAM,GAAI,qBAIrC,IAAM,EAAM,WAAC,IAAA,IAAA,EAAA,GAAA,EAAA,EAAA,EAAA,UAAA,OAAA,IAAA,EAAA,GAAA,UAAA,GAAS,OAAA,QAAQ,IAAG,MAAX,QAAe,IAE/B,EAAQ,WAAC,IAAA,IAAA,EAAA,GAAA,EAAA,EAAA,EAAA,UAAA,OAAA,IAAA,EAAA,GAAA,UAAA,GAAS,OAAA,OAAO,OAAS,EAAG,WAAA,EAAI","file":"sender.633d0aca.js","sourceRoot":"../../src/sender","sourcesContent":["\n// const initializeCastApi = function() {\n//   console.log('initializeCastApi')\n//   // @ts-ignore\n//   cast.framework.CastContext.getInstance().setOptions({\n//     receiverApplicationId: '6ABD8107',\n//     // @ts-ignore\n//     autoJoinPolicy: chrome.cast.AutoJoinPolicy.ORIGIN_SCOPED\n//   });\n// };\n\nconst apps = {\n  cast0: {\n    id: '6ABD8107'\n  },\n  test: {\n    id: '02A556F6'\n  }\n}\n\ndocument.getElementById('connect_cast').addEventListener('click', connectCast);\ndocument.getElementById('disconnect_cast').addEventListener('click', disconnectCast);\n\nlet session = null;\n\n\nconst sessionListener = namespace => (evt) => {\n  log('sessionListener / session id: ' + evt.sessionId);\n  session = evt;\n  session.addUpdateListener(sessionUpdateListener);  \n  session.addMessageListener(namespace, receiverMessage);\n}\n\nfunction sessionUpdateListener(isAlive) {\n  log('sessionUpdateListener / isAlive: ' + isAlive + ' / session id: ' + session.sessionId);\n  if (!isAlive) {\n    session = null;\n  }\n}\n\nfunction receiverMessage(namespace, message) {\n  log('receiverMessage / namespace: ' + namespace + ' / message:' + message);\n}\n\nfunction initializeCastApi(appId, namespace) {\n  log('initializeCastApi');\n    // @ts-ignore\n\n  // cast.framework.CastContext.getInstance().setOptions({\n  //   receiverApplicationId: appId,\n  //     // @ts-ignore\n  //   autoJoinPolicy: chrome.cast.AutoJoinPolicy.ORIGIN_SCOPED\n  // });\n\n  // @ts-ignore\n  var sessionRequest = new chrome.cast.SessionRequest(appId);\n  // @ts-ignore\n  var apiConfig = new chrome.cast.ApiConfig(\n    sessionRequest,\n    sessionListener(namespace),\n    receiverListener\n  );\n  // @ts-ignore\n  chrome.cast.initialize(\n    apiConfig,\n    onInitSuccess,\n    onError\n  );\n}\n\nfunction receiverListener(evt) {\n  log('receiverListener / receiver status: ' + (evt === 'available' ? 'found' : 'list empty'));\n}\n\n\nfunction disconnectCast() {\n  log('disconnect cast');\n  if (session === null) {\n    log('session is null.');\n    return;\n  }\n  log('session is not null.');\n  session.stop(onStopAppSuccess, onError);\n}\n\nfunction onStopAppSuccess() {\n  log('onStopAppSuccess');\n  session = null;\n}\n\nfunction onInitSuccess() {\n  log('onInitSuccess');\n}\n\nfunction onError(message) {\n  log('onError / message: ' + JSON.stringify(message));\n}\n\n\nfunction onConnectCast(evt) {\n  log('onConnectCast / session id: ' + evt.sessionId);\n  session = evt;\n}\n\nfunction connectCast() {\n  log('connect cast');\n  if (session !== null) {\n    log('session is not null.');\n    return;\n  }\n  log('session is null.');\n  // @ts-ignore\n  chrome.cast.requestSession(\n    onConnectCast,\n    onError\n  );\n}\n\n\nwindow['__onGCastApiAvailable'] = function(isAvailable) {\n  console.log('cast api available:', isAvailable)\n  if (isAvailable) {\n    initializeCastApi(apps.cast0.id, 'urn:x-cast:cast0');\n  }\n};\n\nconst log = (...l) => console.log(...l);\n// @ts-ignore\nconst debug = (...l) => window.debug && log(...l);"]}